/**
 * 利用动态规划解决最长公共子序列问题
 * 参考教材《算法导论·第三版》
 * @author wx
 *
 */
public class Lab03 {
	public void LCS_LENGTH(char[] X, char[] Y,int[][] c,char[][] b) {
		int m = X.length-1;
		int n = Y.length-1;
		for (int i = 1; i <= m; i++)
			c[i][0] = 0;
		for (int j = 0; j <= n; j++)
			c[0][j] = 0;
		for (int i = 1; i <= m; i++)
			for (int j = 1; j <=n; j++) {
				if (X[i] == Y[j]) {			//
					c[i][j] = c[i - 1][j - 1] + 1;
					b[i][j] = '↖';
				} else if (c[i - 1][j] >= c[i][j - 1]) {
					c[i][j] = c[i - 1][j];
					b[i][j] = '↑';
				} else {
					c[i][j] = c[i][j - 1];
					b[i][j] = '←';
				}
			}

	}

	public void PRINT_LCS(char[][] b, char[] X, int i, int j) {
		if (i == 0 || j == 0)
			return;
		if (b[i][j] == '↖') {
			PRINT_LCS(b, X, i - 1, j - 1);
			System.out.print(X[i]+" ");
		} else if (b[i][j] == '↑') {
			PRINT_LCS(b, X, i - 1, j);
		} else {
			PRINT_LCS(b, X, i, j - 1);
		}
	}

	public static void main(String[] args) {
		Lab03 lab=new Lab03();
		char[] X= {' ','a','a','b','b','d','a','b'};		//测试用例
		char[] Y= {' ','b','d','c','a','b','d'};
		
//		char[] X= {' ','A','B','C','B','D','A','B'};		//测试用例
//		char[] Y= {' ','B','D','C','A','B','A'};
		
		int m = X.length;									//X的长度
		int n = Y.length;									//Y的长度
		int[][] c = new int[m][n];							//用于保存X和Y的LCS长度
		char[][] b = new char[m][n];						//用于保存计算c[i][j]时所选的最优解
		lab.LCS_LENGTH(X, Y,c,b);
		lab.PRINT_LCS(b, X, m-1, n-1);						//由于数组是从1开始，所以这里都要减1
		

	}

}
